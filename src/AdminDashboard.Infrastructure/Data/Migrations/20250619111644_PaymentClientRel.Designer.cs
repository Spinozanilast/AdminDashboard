// <auto-generated />
using System;
using AdminDashboard.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AdminDashboard.Infrastructure.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250619111644_PaymentClientRel")]
    partial class PaymentClientRel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AdminDashboard.Domain.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("BalanceT")
                        .HasColumnType("numeric")
                        .HasColumnName("balance_t");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_clients");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_clients_email");

                    b.ToTable("clients", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ffc8296f-886c-4d18-a245-4ab0cf6c2b28"),
                            BalanceT = 100m,
                            Email = "john@example.com",
                            Name = "John Doe"
                        },
                        new
                        {
                            Id = new Guid("63ead4d6-88f1-48ea-b0cb-2843fabf87b4"),
                            BalanceT = 200m,
                            Email = "jane@example.com",
                            Name = "Jane Smith"
                        },
                        new
                        {
                            Id = new Guid("95a88551-7a97-47c3-8baa-d97623823869"),
                            BalanceT = 300m,
                            Email = "bob@example.com",
                            Name = "Bob Johnson"
                        });
                });

            modelBuilder.Entity("AdminDashboard.Domain.ExchangeRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated");

                    b.Property<decimal>("Rate")
                        .HasColumnType("numeric")
                        .HasColumnName("rate");

                    b.HasKey("Id")
                        .HasName("pk_exchange_rates");

                    b.ToTable("exchange_rates", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("05acc9b9-4e0a-4795-ba92-f4621a11639e"),
                            LastUpdated = new DateTime(2025, 6, 19, 11, 16, 43, 351, DateTimeKind.Utc).AddTicks(235),
                            Rate = 10.0m
                        });
                });

            modelBuilder.Entity("AdminDashboard.Domain.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("pk_payments");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_payments_client_id");

                    b.ToTable("payments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("225af31e-46bd-4dfe-b5fb-12f31095e960"),
                            Amount = 50m,
                            ClientId = new Guid("ffc8296f-886c-4d18-a245-4ab0cf6c2b28"),
                            Date = new DateTime(2025, 6, 19, 11, 16, 43, 566, DateTimeKind.Utc).AddTicks(5568),
                            Description = "Payment 1"
                        },
                        new
                        {
                            Id = new Guid("f34b52e9-502c-4d5a-ae49-982eb309044a"),
                            Amount = 75m,
                            ClientId = new Guid("ffc8296f-886c-4d18-a245-4ab0cf6c2b28"),
                            Date = new DateTime(2025, 6, 19, 11, 16, 43, 566, DateTimeKind.Utc).AddTicks(5807),
                            Description = "Payment 2"
                        },
                        new
                        {
                            Id = new Guid("53fe1933-b4b3-41c7-9d25-51b0fcc755cf"),
                            Amount = 100m,
                            ClientId = new Guid("63ead4d6-88f1-48ea-b0cb-2843fabf87b4"),
                            Date = new DateTime(2025, 6, 19, 11, 16, 43, 566, DateTimeKind.Utc).AddTicks(5812),
                            Description = "Payment 3"
                        },
                        new
                        {
                            Id = new Guid("dd4684dc-7ab1-4cfa-b61e-9108f57ce7be"),
                            Amount = 25m,
                            ClientId = new Guid("95a88551-7a97-47c3-8baa-d97623823869"),
                            Date = new DateTime(2025, 6, 19, 11, 16, 43, 566, DateTimeKind.Utc).AddTicks(5817),
                            Description = "Payment 4"
                        },
                        new
                        {
                            Id = new Guid("7389534e-2ae9-4e78-8ae1-034c3eebe944"),
                            Amount = 150m,
                            ClientId = new Guid("95a88551-7a97-47c3-8baa-d97623823869"),
                            Date = new DateTime(2025, 6, 19, 11, 16, 43, 566, DateTimeKind.Utc).AddTicks(5822),
                            Description = "Payment 5"
                        });
                });

            modelBuilder.Entity("AdminDashboard.Domain.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("revoked");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_refresh_tokens");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_refresh_tokens_user_id");

                    b.ToTable("refresh_tokens", (string)null);
                });

            modelBuilder.Entity("AdminDashboard.Domain.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("color");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_tags");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_tags_name");

                    b.ToTable("tags", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c8c90070-486b-482b-9e1d-89639f0d8533"),
                            Color = "#ff0000",
                            Name = "VIP"
                        },
                        new
                        {
                            Id = new Guid("0631783e-41a9-40eb-bf33-43e78acd9632"),
                            Color = "#00ff00",
                            Name = "Regular"
                        });
                });

            modelBuilder.Entity("AdminDashboard.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("6732a5fd-4a21-4d0b-9d52-9480887277c4"),
                            Email = "admin@mirra.dev",
                            PasswordHash = "$2a$11$OxMVjuCygRNxm7FFMpzSEe6/6yQkA2aJaM9Zfg32yhm8RE/limjYy"
                        });
                });

            modelBuilder.Entity("ClientTag", b =>
                {
                    b.Property<Guid>("ClientsId")
                        .HasColumnType("uuid")
                        .HasColumnName("clients_id");

                    b.Property<Guid>("TagsId")
                        .HasColumnType("uuid")
                        .HasColumnName("tags_id");

                    b.HasKey("ClientsId", "TagsId")
                        .HasName("pk_client_tag");

                    b.HasIndex("TagsId")
                        .HasDatabaseName("ix_client_tag_tags_id");

                    b.ToTable("client_tag", (string)null);

                    b.HasData(
                        new
                        {
                            ClientsId = new Guid("ffc8296f-886c-4d18-a245-4ab0cf6c2b28"),
                            TagsId = new Guid("c8c90070-486b-482b-9e1d-89639f0d8533")
                        },
                        new
                        {
                            ClientsId = new Guid("63ead4d6-88f1-48ea-b0cb-2843fabf87b4"),
                            TagsId = new Guid("c8c90070-486b-482b-9e1d-89639f0d8533")
                        },
                        new
                        {
                            ClientsId = new Guid("95a88551-7a97-47c3-8baa-d97623823869"),
                            TagsId = new Guid("0631783e-41a9-40eb-bf33-43e78acd9632")
                        });
                });

            modelBuilder.Entity("AdminDashboard.Domain.Payment", b =>
                {
                    b.HasOne("AdminDashboard.Domain.Client", "Client")
                        .WithMany("Payments")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_payments_clients_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AdminDashboard.Domain.RefreshToken", b =>
                {
                    b.HasOne("AdminDashboard.Domain.User", null)
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_refresh_tokens_users_user_id");
                });

            modelBuilder.Entity("ClientTag", b =>
                {
                    b.HasOne("AdminDashboard.Domain.Client", null)
                        .WithMany()
                        .HasForeignKey("ClientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_tag_clients_clients_id");

                    b.HasOne("AdminDashboard.Domain.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_tag_tags_tags_id");
                });

            modelBuilder.Entity("AdminDashboard.Domain.Client", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("AdminDashboard.Domain.User", b =>
                {
                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
