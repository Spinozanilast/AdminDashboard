// <auto-generated />
using System;
using AdminDashboard.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AdminDashboard.Infrastructure.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250619061415_InitMigration")]
    partial class InitMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AdminDashboard.Domain.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("BalanceT")
                        .HasColumnType("numeric")
                        .HasColumnName("balance_t");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_clients");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_clients_email");

                    b.ToTable("clients", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("03a68bb0-57f3-49c8-885e-aac2ddf74738"),
                            BalanceT = 100m,
                            Email = "john@example.com",
                            Name = "John Doe"
                        },
                        new
                        {
                            Id = new Guid("1b433c18-f11a-46fd-a731-52ed46a89916"),
                            BalanceT = 200m,
                            Email = "jane@example.com",
                            Name = "Jane Smith"
                        },
                        new
                        {
                            Id = new Guid("11f651f4-fd29-4418-bb65-e18438b067c7"),
                            BalanceT = 300m,
                            Email = "bob@example.com",
                            Name = "Bob Johnson"
                        });
                });

            modelBuilder.Entity("AdminDashboard.Domain.ExchangeRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated");

                    b.Property<decimal>("Rate")
                        .HasColumnType("numeric")
                        .HasColumnName("rate");

                    b.HasKey("Id")
                        .HasName("pk_exchange_rates");

                    b.ToTable("exchange_rates", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("260b90ff-c556-426b-8567-9276bc3e339d"),
                            LastUpdated = new DateTime(2025, 6, 19, 6, 14, 14, 287, DateTimeKind.Utc).AddTicks(9403),
                            Rate = 10.0m
                        });
                });

            modelBuilder.Entity("AdminDashboard.Domain.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("pk_payments");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_payments_client_id");

                    b.ToTable("payments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e91bfe8e-7d77-4af9-8c14-7567e1bf08f6"),
                            Amount = 50m,
                            ClientId = new Guid("03a68bb0-57f3-49c8-885e-aac2ddf74738"),
                            Date = new DateTime(2025, 6, 19, 6, 14, 14, 622, DateTimeKind.Utc).AddTicks(2227),
                            Description = "Payment 1"
                        },
                        new
                        {
                            Id = new Guid("c0df2376-f828-4cd4-af3d-1f0fb0dcadf1"),
                            Amount = 75m,
                            ClientId = new Guid("03a68bb0-57f3-49c8-885e-aac2ddf74738"),
                            Date = new DateTime(2025, 6, 19, 6, 14, 14, 622, DateTimeKind.Utc).AddTicks(2471),
                            Description = "Payment 2"
                        },
                        new
                        {
                            Id = new Guid("88e94f46-3472-4965-90ee-d55d9a5c20f1"),
                            Amount = 100m,
                            ClientId = new Guid("1b433c18-f11a-46fd-a731-52ed46a89916"),
                            Date = new DateTime(2025, 6, 19, 6, 14, 14, 622, DateTimeKind.Utc).AddTicks(2476),
                            Description = "Payment 3"
                        },
                        new
                        {
                            Id = new Guid("eb11a863-31a4-425d-8501-69c18c791e4c"),
                            Amount = 25m,
                            ClientId = new Guid("11f651f4-fd29-4418-bb65-e18438b067c7"),
                            Date = new DateTime(2025, 6, 19, 6, 14, 14, 622, DateTimeKind.Utc).AddTicks(2481),
                            Description = "Payment 4"
                        },
                        new
                        {
                            Id = new Guid("d680ccfc-3135-44b7-ad50-4b438f5f4c41"),
                            Amount = 150m,
                            ClientId = new Guid("11f651f4-fd29-4418-bb65-e18438b067c7"),
                            Date = new DateTime(2025, 6, 19, 6, 14, 14, 622, DateTimeKind.Utc).AddTicks(2486),
                            Description = "Payment 5"
                        });
                });

            modelBuilder.Entity("AdminDashboard.Domain.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("revoked");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_refresh_tokens");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_refresh_tokens_user_id");

                    b.ToTable("refresh_tokens", (string)null);
                });

            modelBuilder.Entity("AdminDashboard.Domain.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("color");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_tags");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_tags_name");

                    b.ToTable("tags", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("4df49d3e-e801-43d2-933a-f90d79ff51bb"),
                            Color = "#ff0000",
                            Name = "VIP"
                        },
                        new
                        {
                            Id = new Guid("b63ecaf9-da5a-43dd-990a-2da858e8704d"),
                            Color = "#00ff00",
                            Name = "Regular"
                        });
                });

            modelBuilder.Entity("AdminDashboard.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("cf1f5dac-5edf-4fa0-bdc9-7e923e3c45c6"),
                            Email = "admin@mirra.dev",
                            PasswordHash = "$2a$11$.syTzSU2WWH46KGG.7.trOg631Vq.bAotNfuKfo8B/kgmyffOBfFi"
                        });
                });

            modelBuilder.Entity("ClientTag", b =>
                {
                    b.Property<Guid>("ClientsId")
                        .HasColumnType("uuid")
                        .HasColumnName("clients_id");

                    b.Property<Guid>("TagsId")
                        .HasColumnType("uuid")
                        .HasColumnName("tags_id");

                    b.HasKey("ClientsId", "TagsId")
                        .HasName("pk_client_tag");

                    b.HasIndex("TagsId")
                        .HasDatabaseName("ix_client_tag_tags_id");

                    b.ToTable("client_tag", (string)null);

                    b.HasData(
                        new
                        {
                            ClientsId = new Guid("03a68bb0-57f3-49c8-885e-aac2ddf74738"),
                            TagsId = new Guid("4df49d3e-e801-43d2-933a-f90d79ff51bb")
                        },
                        new
                        {
                            ClientsId = new Guid("1b433c18-f11a-46fd-a731-52ed46a89916"),
                            TagsId = new Guid("4df49d3e-e801-43d2-933a-f90d79ff51bb")
                        },
                        new
                        {
                            ClientsId = new Guid("11f651f4-fd29-4418-bb65-e18438b067c7"),
                            TagsId = new Guid("b63ecaf9-da5a-43dd-990a-2da858e8704d")
                        });
                });

            modelBuilder.Entity("AdminDashboard.Domain.Payment", b =>
                {
                    b.HasOne("AdminDashboard.Domain.Client", null)
                        .WithMany("Payments")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_payments_clients_client_id");
                });

            modelBuilder.Entity("AdminDashboard.Domain.RefreshToken", b =>
                {
                    b.HasOne("AdminDashboard.Domain.User", null)
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_refresh_tokens_users_user_id");
                });

            modelBuilder.Entity("ClientTag", b =>
                {
                    b.HasOne("AdminDashboard.Domain.Client", null)
                        .WithMany()
                        .HasForeignKey("ClientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_tag_clients_clients_id");

                    b.HasOne("AdminDashboard.Domain.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_tag_tags_tags_id");
                });

            modelBuilder.Entity("AdminDashboard.Domain.Client", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("AdminDashboard.Domain.User", b =>
                {
                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
